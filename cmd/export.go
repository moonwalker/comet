package cmd

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/spf13/cobra"

	"github.com/moonwalker/comet/internal/log"
	"github.com/moonwalker/comet/internal/schema"
)

var (
	exportDir string
	exportCmd = &cobra.Command{
		Use:   "export <stack> [component...]",
		Short: "Export stack to standalone Terraform files",
		Long: `Export generates standalone Terraform files that can be used without Comet.

This is useful for:
- Sharing infrastructure code with teams not using Comet
- Migrating away from Comet
- Creating snapshots of generated configuration
- Debugging generated Terraform code

The exported directory will contain all generated .tf and .tfvars files.`,
		Run:  export_stack,
		Args: cobra.MinimumNArgs(1),
	}
)

func init() {
	exportCmd.Flags().StringVarP(&exportDir, "output", "o", "./exported", "Output directory for exported files")
	rootCmd.AddCommand(exportCmd)
}

func export_stack(cmd *cobra.Command, args []string) {
	log.Info(fmt.Sprintf("Exporting stack '%s' to '%s'", args[0], exportDir))

	run(args, false, func(component *schema.Component, executor schema.Executor) {
		// Create export directory structure
		componentExportDir := filepath.Join(exportDir, args[0], component.Name)
		err := os.MkdirAll(componentExportDir, 0755)
		if err != nil {
			log.Fatal(fmt.Errorf("failed to create export directory: %w", err))
		}

		// Copy generated files to export directory
		files := []string{
			"backend.tf.json",
			"providers_gen.tf",
			fmt.Sprintf("%s-%s.tfvars.json", args[0], component.Name),
		}

		for _, file := range files {
			srcPath := filepath.Join(component.Path, file)
			dstPath := filepath.Join(componentExportDir, file)

			// Check if source file exists
			if _, err := os.Stat(srcPath); os.IsNotExist(err) {
				continue
			}

			// Read source file
			content, err := os.ReadFile(srcPath)
			if err != nil {
				log.Warn(fmt.Sprintf("failed to read %s: %v", file, err))
				continue
			}

			// Write to destination
			err = os.WriteFile(dstPath, content, 0644)
			if err != nil {
				log.Fatal(fmt.Errorf("failed to write %s: %w", file, err))
			}

			log.Info(fmt.Sprintf("Exported %s", file))
		}

		// Create a README in the export directory
		readmePath := filepath.Join(componentExportDir, "README.md")
		readme := fmt.Sprintf(`# Exported Terraform Configuration

## Component: %s
## Stack: %s

This directory contains standalone Terraform configuration exported from Comet.

## Usage

### Initialize Terraform

`+"```bash"+`
terraform init
`+"```"+`

### Plan

`+"```bash"+`
terraform plan -var-file=%s-%s.tfvars.json
`+"```"+`

### Apply

`+"```bash"+`
terraform apply -var-file=%s-%s.tfvars.json
`+"```"+`

## Files

- `+"`backend.tf.json`"+` - Backend configuration
- `+"`providers_gen.tf`"+` - Provider configurations
- `+"`%s-%s.tfvars.json`"+` - Variable values

## Notes

This configuration was generated by Comet. To continue using Comet's
features (cross-stack references, SOPS secrets, etc.), use the original
stack files instead.
`,
			component.Name,
			args[0],
			args[0], component.Name,
			args[0], component.Name,
			args[0], component.Name,
		)

		err = os.WriteFile(readmePath, []byte(readme), 0644)
		if err != nil {
			log.Warn(fmt.Sprintf("failed to write README: %v", err))
		}

		log.Info(fmt.Sprintf("✓ Exported component '%s' to %s", component.Name, componentExportDir))
	})

	log.Info(fmt.Sprintf("✓ Export complete: %s", exportDir))
	log.Info("The exported directory contains standalone Terraform files that can be used without Comet")
}
